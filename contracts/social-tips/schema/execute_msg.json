{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Message to send a tip to another user by application handle.",
      "type": "object",
      "required": [
        "send_tip"
      ],
      "properties": {
        "send_tip": {
          "type": "object",
          "required": [
            "application",
            "handle"
          ],
          "properties": {
            "application": {
              "type": "string"
            },
            "handle": {
              "type": "string"
            },
            "owner_index": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint64"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Message that allows a user to claim their pending tips.",
      "type": "object",
      "required": [
        "claim_tips"
      ],
      "properties": {
        "claim_tips": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Message that allows the current admin to update the contract admin.",
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "required": [
            "new_admin"
          ],
          "properties": {
            "new_admin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Message that allows the current admin to update the max pending tips that can be associated to a centralized application.",
      "type": "object",
      "required": [
        "update_max_pending_tips"
      ],
      "properties": {
        "update_max_pending_tips": {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Message that allows the current admin to update the max pending tips that can be sent from a user.",
      "type": "object",
      "required": [
        "update_max_sent_pending_tips"
      ],
      "properties": {
        "update_max_sent_pending_tips": {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Message to remove an unclaimed pending tip.",
      "type": "object",
      "required": [
        "remove_pending_tip"
      ],
      "properties": {
        "remove_pending_tip": {
          "type": "object",
          "required": [
            "application",
            "handle"
          ],
          "properties": {
            "application": {
              "type": "string"
            },
            "handle": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
