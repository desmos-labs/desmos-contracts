{
  "contract_name": "social-tips",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "max_pending_tips",
      "max_sent_pending_tips"
    ],
    "properties": {
      "admin": {
        "type": [
          "string",
          "null"
        ]
      },
      "max_pending_tips": {
        "type": "integer",
        "format": "uint16",
        "minimum": 0.0
      },
      "max_sent_pending_tips": {
        "type": "integer",
        "format": "uint16",
        "minimum": 0.0
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Message to send a tip to another user by application handle.",
        "type": "object",
        "required": [
          "send_tip"
        ],
        "properties": {
          "send_tip": {
            "type": "object",
            "required": [
              "application",
              "handle"
            ],
            "properties": {
              "application": {
                "type": "string"
              },
              "handle": {
                "type": "string"
              },
              "owner_index": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint64"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Message that allows a user to claim their pending tips.",
        "type": "object",
        "required": [
          "claim_tips"
        ],
        "properties": {
          "claim_tips": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Message that allows the current admin to update the contract admin.",
        "type": "object",
        "required": [
          "update_admin"
        ],
        "properties": {
          "update_admin": {
            "type": "object",
            "required": [
              "new_admin"
            ],
            "properties": {
              "new_admin": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Message that allows the current admin to update the max pending tips that can be associated to a centralized application.",
        "type": "object",
        "required": [
          "update_max_pending_tips"
        ],
        "properties": {
          "update_max_pending_tips": {
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Message that allows the current admin to update the max pending tips that can be sent from a user.",
        "type": "object",
        "required": [
          "update_max_sent_pending_tips"
        ],
        "properties": {
          "update_max_sent_pending_tips": {
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Message to remove an unclaimed pending tip.",
        "type": "object",
        "required": [
          "remove_pending_tip"
        ],
        "properties": {
          "remove_pending_tip": {
            "type": "object",
            "required": [
              "application",
              "handle"
            ],
            "properties": {
              "application": {
                "type": "string"
              },
              "handle": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Query the pending tips of a user.",
        "type": "object",
        "required": [
          "user_pending_tips"
        ],
        "properties": {
          "user_pending_tips": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Message to query the unclaimed tips sent from a user.",
        "type": "object",
        "required": [
          "unclaimed_sent_tips"
        ],
        "properties": {
          "unclaimed_sent_tips": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Message to query the contract configurations.",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryConfigResponse",
      "description": "Response to [QueryMsg::UnclaimedTips].",
      "type": "object",
      "required": [
        "admin",
        "max_pending_tips",
        "max_sent_pending_tips"
      ],
      "properties": {
        "admin": {
          "$ref": "#/definitions/Addr"
        },
        "max_pending_tips": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "max_sent_pending_tips": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "unclaimed_sent_tips": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryUnclaimedSentTipsResponse",
      "description": "Response to [QueryMsg::UnclaimedTips].",
      "type": "object",
      "required": [
        "tips"
      ],
      "properties": {
        "tips": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingTip"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "PendingTip": {
          "type": "object",
          "required": [
            "amount",
            "block_height",
            "sender"
          ],
          "properties": {
            "amount": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "block_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "sender": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "user_pending_tips": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryPendingTipsResponse",
      "description": "Response to [QueryMsg::UserPendingTips].",
      "type": "object",
      "required": [
        "tips"
      ],
      "properties": {
        "tips": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingTip"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "PendingTip": {
          "type": "object",
          "required": [
            "amount",
            "block_height",
            "sender"
          ],
          "properties": {
            "amount": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "block_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "sender": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
