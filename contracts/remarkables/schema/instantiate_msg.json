{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "admin",
    "cw721_code_id",
    "cw721_instantiate_msg",
    "rarities",
    "subspace_id"
  ],
  "properties": {
    "admin": {
      "description": "Address of who will have the right to administer the contract.",
      "type": "string"
    },
    "cw721_code_id": {
      "description": "Id of the CW721 contract to initialize together with this contract.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "cw721_instantiate_msg": {
      "description": "Initialization message that will be sent to the CW721 contract.",
      "allOf": [
        {
          "$ref": "#/definitions/InstantiateMsg"
        }
      ]
    },
    "rarities": {
      "description": "List of rarities to initialize with this contract.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Rarity"
      }
    },
    "subspace_id": {
      "description": "Id of the subspace to operate.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "InstantiateMsg": {
      "type": "object",
      "required": [
        "minter",
        "name",
        "symbol"
      ],
      "properties": {
        "minter": {
          "description": "The minter is the only one who can create new NFTs. This is designed for a base NFT that is controlled by an external program or contract. You will likely replace this with custom logic in custom NFTs",
          "type": "string"
        },
        "name": {
          "description": "Name of the NFT contract",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the NFT contract",
          "type": "string"
        }
      }
    },
    "Rarity": {
      "type": "object",
      "required": [
        "engagement_threshold",
        "mint_fees"
      ],
      "properties": {
        "engagement_threshold": {
          "description": "Threshold of the reactions amount to mint.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "mint_fees": {
          "description": "Mint fees associated with the rarity",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
