{
  "contract_name": "poap-manager",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin",
      "poap_code_id",
      "poap_instantiate_msg"
    ],
    "properties": {
      "admin": {
        "description": "Address of who will have the right to administer the contract.",
        "type": "string"
      },
      "poap_code_id": {
        "description": "Id of the POAP contract to be initialized along with this contract.",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "poap_instantiate_msg": {
        "description": "Initialization message of the POAP contract.",
        "allOf": [
          {
            "$ref": "#/definitions/PoapInstantiateMsg"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "EventInfo": {
        "type": "object",
        "required": [
          "creator",
          "end_time",
          "per_address_limit",
          "poap_uri",
          "start_time"
        ],
        "properties": {
          "creator": {
            "description": "User that created the event.",
            "type": "string"
          },
          "end_time": {
            "description": "Time at which the event ends.",
            "allOf": [
              {
                "$ref": "#/definitions/Timestamp"
              }
            ]
          },
          "per_address_limit": {
            "description": "Max amount of poap that a single user can mint.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "poap_uri": {
            "description": "Identifies a valid IPFS URI corresponding to where the assets and metadata of the POAPs are stored.",
            "type": "string"
          },
          "start_time": {
            "description": "Time at which the event begins.",
            "allOf": [
              {
                "$ref": "#/definitions/Timestamp"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "InstantiateMsg": {
        "type": "object",
        "required": [
          "minter",
          "name",
          "symbol"
        ],
        "properties": {
          "minter": {
            "description": "The minter is the only one who can create new NFTs. This is designed for a base NFT that is controlled by an external program or contract. You will likely replace this with custom logic in custom NFTs",
            "type": "string"
          },
          "name": {
            "description": "Name of the NFT contract",
            "type": "string"
          },
          "symbol": {
            "description": "Symbol of the NFT contract",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PoapInstantiateMsg": {
        "title": "InstantiateMsg",
        "type": "object",
        "required": [
          "admin",
          "cw721_code_id",
          "cw721_instantiate_msg",
          "event_info",
          "minter"
        ],
        "properties": {
          "admin": {
            "description": "Address of who will have the right to administer the contract.",
            "type": "string"
          },
          "cw721_code_id": {
            "description": "Id of the CW721 contract to initialize together with this contract.",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          },
          "cw721_instantiate_msg": {
            "description": "Initialization message that will be sent to the CW721 contract.",
            "allOf": [
              {
                "$ref": "#/definitions/InstantiateMsg"
              }
            ]
          },
          "event_info": {
            "description": "Information about the event.",
            "allOf": [
              {
                "$ref": "#/definitions/EventInfo"
              }
            ]
          },
          "minter": {
            "description": "Address of who can call the [`ExecuteMsg::MintTo`] other then the admin.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Allows users to claim a POAP token.",
        "type": "object",
        "required": [
          "claim"
        ],
        "properties": {
          "claim": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows the contract's admin to mint a POAP for a specific recipient.",
        "type": "object",
        "required": [
          "mint_to"
        ],
        "properties": {
          "mint_to": {
            "type": "object",
            "required": [
              "recipient"
            ],
            "properties": {
              "recipient": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows the contract's admin to transfer the admin rights to another user.",
        "type": "object",
        "required": [
          "update_admin"
        ],
        "properties": {
          "update_admin": {
            "type": "object",
            "required": [
              "new_admin"
            ],
            "properties": {
              "new_admin": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns a ConfigResponse containing the configuration info of the Manager contract",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryConfigResponse",
      "type": "object",
      "required": [
        "admin",
        "poap_code_id",
        "poap_contract_address"
      ],
      "properties": {
        "admin": {
          "description": "Address of the contract administrator.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "poap_code_id": {
          "description": "Id of the POAP contract that this contract has initialized.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "poap_contract_address": {
          "description": "Address of the POAP contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    }
  }
}
