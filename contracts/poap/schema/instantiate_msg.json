{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "admin",
    "cw721_code_id",
    "cw721_instantiate_msg",
    "event_info",
    "minter"
  ],
  "properties": {
    "admin": {
      "description": "Address of who will have the right to administer the contract.",
      "type": "string"
    },
    "cw721_code_id": {
      "description": "Id of the CW721 contract to initialize together with this contract.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "cw721_instantiate_msg": {
      "description": "Initialization message that will be sent to the CW721 contract.",
      "allOf": [
        {
          "$ref": "#/definitions/InstantiateMsg"
        }
      ]
    },
    "event_info": {
      "description": "Information about the event.",
      "allOf": [
        {
          "$ref": "#/definitions/EventInfo"
        }
      ]
    },
    "minter": {
      "description": "Address of who can call the [`ExecuteMsg::MintTo`] other then the admin.",
      "type": "string"
    }
  },
  "definitions": {
    "EventInfo": {
      "type": "object",
      "required": [
        "creator",
        "end_time",
        "per_address_limit",
        "poap_uri",
        "start_time"
      ],
      "properties": {
        "creator": {
          "description": "User that created the event.",
          "type": "string"
        },
        "end_time": {
          "description": "Time at which the event ends.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "per_address_limit": {
          "description": "Max amount of poap that a single user can mint.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "poap_uri": {
          "description": "Identifies a valid IPFS URI corresponding to where the assets and metadata of the POAPs are stored.",
          "type": "string"
        },
        "start_time": {
          "description": "Time at which the event begins.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        }
      }
    },
    "InstantiateMsg": {
      "type": "object",
      "required": [
        "minter",
        "name",
        "symbol"
      ],
      "properties": {
        "minter": {
          "description": "The minter is the only one who can create new NFTs. This is designed for a base NFT that is controlled by an external program or contract. You will likely replace this with custom logic in custom NFTs",
          "type": "string"
        },
        "name": {
          "description": "Name of the NFT contract",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the NFT contract",
          "type": "string"
        }
      }
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
