{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Allows the contract's admin to enable the [`ExecuteMsg::Mint`].",
      "type": "object",
      "required": [
        "enable_mint"
      ],
      "properties": {
        "enable_mint": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the contract's admin to disable the [`ExecuteMsg::Mint`].",
      "type": "object",
      "required": [
        "disable_mint"
      ],
      "properties": {
        "disable_mint": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "If the mint is enabled, allow the user to mint the poap by themself. It's disabled after the event's end.",
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the contract's admin or the minter to mint a POAP for a specific recipient. It's disabled after the event's end.",
      "type": "object",
      "required": [
        "mint_to"
      ],
      "properties": {
        "mint_to": {
          "type": "object",
          "required": [
            "recipient"
          ],
          "properties": {
            "recipient": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Message that allows the event's creator to change the time frame of the event if it's not started or finished.",
      "type": "object",
      "required": [
        "update_event_info"
      ],
      "properties": {
        "update_event_info": {
          "type": "object",
          "required": [
            "end_time",
            "start_time"
          ],
          "properties": {
            "end_time": {
              "$ref": "#/definitions/Timestamp"
            },
            "start_time": {
              "$ref": "#/definitions/Timestamp"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the contract's admin to transfer the admin rights to another user.",
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "required": [
            "new_admin"
          ],
          "properties": {
            "new_admin": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the contract's admin to transfer the minting rights to another user.",
      "type": "object",
      "required": [
        "update_minter"
      ],
      "properties": {
        "update_minter": {
          "type": "object",
          "required": [
            "new_minter"
          ],
          "properties": {
            "new_minter": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
