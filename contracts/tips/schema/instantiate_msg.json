{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "admin",
    "saved_tips_threshold",
    "service_fee",
    "subspace_id"
  ],
  "properties": {
    "admin": {
      "description": "Address of who will have the right to administer the contract.",
      "type": "string"
    },
    "saved_tips_threshold": {
      "description": "The number of records saved of a user tips history.",
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "service_fee": {
      "description": "Fee that the users need to pay to use the contract.",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceFee"
        }
      ]
    },
    "subspace_id": {
      "description": "Application which is deploying the contract.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ServiceFee": {
      "description": "Fees required to execute [`ExecuteMsg::SendTip`].",
      "oneOf": [
        {
          "description": "Represents a fixed fee that is deducted from the tip.",
          "type": "object",
          "required": [
            "fixed"
          ],
          "properties": {
            "fixed": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "description": "Coins that are deducted from the tip.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Represents a percentage that is deducted from the tip.",
          "type": "object",
          "required": [
            "percentage"
          ],
          "properties": {
            "percentage": {
              "type": "object",
              "required": [
                "decimals",
                "value"
              ],
              "properties": {
                "decimals": {
                  "description": "Percentage decimals. Example if this value is 3 means that the value should have 3 decimals numbers so if value is - 1 means 0,001% - 10 means 0,01% - 100 means 0,1% - 1000 means 1% - 10000 means 10% - 100000 means 100%",
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "value": {
                  "description": "Percentage value.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
