version: 2.1
workflows:
  version: 2
  test:
    jobs:
      - contract_filter_posts
      - package_desmos
  deploy:
    jobs:
      - build_and_upload_contracts:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/

jobs:
  contract_filter_contracts:
    docker:
      - image: rust:1.48.0
    working_directory: ~/project/contracts/filter-posts
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-filter-posts-rust:1.48.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Unit tests
          env: RUST_BACKTRACE=1
          command: cargo unit-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure checked-in source code and schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-filter-posts-rust:1.48.0-{{ checksum "~/project/Cargo.lock" }}

  package_desmos:
    docker:
      - image: rust:1.48.0
    working_directory: ~/project/packages/desmos
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-controllers:1.48.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Build library for native target
          command: cargo build --locked
      - run:
          name: Run unit tests
          command: cargo test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-v2-controllers:1.48.0-{{ checksum "~/project/Cargo.lock" }}
  lint:
    docker:
      - image: rust:1.48.0
    steps:
      - checkout
      - run:
          name: Version Information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-lint-rust:1.48.0-{{ checksum "Cargo.lock" }}
      - run:
          name: Add rustfmt component
          command: rustup component add rustfmt
      - run:
          name: Check formatting of workspace
          command: cargo fmt -- --check
      - run:
          name: Clippy linting on workspace
          command: cargo clippy -- -D warnings
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-lint-rust:1.48.0-{{ checksum "Cargo.lock" }}

  # this runs one time on the top level to ensure all contracts compile properly into wasm
  # we don't run the wasm build and the reuse a lot of the same dependencies, so this should speed up CI time
  # for all the other tests
  wasm-build:
    docker:
      - image: rust:1.48.0
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-wasm-rust:1.48.0-{{ checksum "~/project/Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown
      - run:
          name: Build Wasm Release
          command: cargo build --release --target wasm32-unknown-unknown --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: cargocache-wasm-rust:1.48.0-{{ checksum "~/project/Cargo.lock" }}

  # This job roughly follows the instructions from https://circleci.com/blog/publishing-to-github-releases-via-circleci/
  build_and_upload_contracts:
    docker:
      # Image from https://github.com/cibuilds/github, based on alpine
      - image: cibuilds/github:0.13
    steps:
      - run:
          name: Install Docker client
          command: apk add docker-cli
      - setup_remote_docker
      - checkout
      - run:
          # We cannot mount local folders, see https://circleci:com/docs/2:0/building-docker-images/#mounting-folders
          name: Prepare volume with source code
          command: |
            # create a dummy container which will hold a volume with config
            docker create -v /code --name with_code alpine /bin/true
            # copy a config file into this volume
            docker cp Cargo.toml with_code:/code
            docker cp Cargo.lock with_code:/code
            # copy code into this volume
            docker cp ./contracts with_code:/code
      - run:
          name: Build development contracts
          command: |
            docker run --volumes-from with_code cosmwasm/workspace-optimizer:0.10.7
            docker cp with_code:/code/artifacts ./artifacts
      - run:
          name: Show data
          command: |
            ls -l artifacts
            cat artifacts/checksums.txt
      - run:
          name: Publish artifacts on Github
          command: |
            TAG="$CIRCLE_TAG"
            TITLE="$TAG"
            BODY="Attached there are some build artifacts generated at this tag. Those are for development purposes only! Please use crates.io to find the packages of this release."
            ghr -t "$GITHUB_TOKEN" \
              -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
              -c "$CIRCLE_SHA1" \
              -n "$TITLE" -b "$BODY" \
              -delete \
              "$TAG" ./artifacts/
