name: Package-desmos
# Based on https://github.com/actions-rs/example/blob/master/.github/workflows/quickstart.yml

on:
  pull_request:

defaults:
  run:
    shell: bash
    working-directory: packages/desmos-std

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.53.0
          target: wasm32-unknown-unknown
          profile: minimal
          override: true
      - name: Compile WASM contract
        run: cargo wasm --locked

        env:
          RUSTFLAGS: "-C link-arg=-s"
      - name: Unit tests
        run: cargo unit-test --locked
        env:
          RUST_BACKTRACE: 1
  coverage:
    name: Upload coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1.3
        with:
          version: '0.18.0-alpha3'
          args: '--avoid-cfg-tarpaulin --all-features'

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.53.0
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy
  build:
    name: Test features build
    runs-on: ubuntu-latest
    env:
      working-directory: ./packages/desmos-std
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.53.0
          override: true
          components: rustfmt, clippy

      - name: Build No features
        run: cargo build --no-default-features
        working-directory: ${{env.working-directory}}

      - name: Build feature (query)
        run: cargo build --no-default-features --features query
        working-directory: ${{env.working-directory}}

      - name: Build feature (profiles)
        run: cargo build --no-default-features --features profiles
        working-directory: ${{env.working-directory}}

      - name: Build feature (profiles+query)
        run: cargo build --no-default-features --features profiles,query

      - name: Build feature (subspaces)
        run: cargo build --no-default-features --features subspaces
        working-directory: ${{env.working-directory}}

      - name: Build feature (subspaces+query)
        run: cargo build --no-default-features --features subspaces,query
        working-directory: ${{env.working-directory}}

      - name: Build feature (relationships)
        run: cargo build --no-default-features --features relationships
        working-directory: ${{env.working-directory}}

      - name: Build feature (relationships+query)
        run: cargo build --no-default-features --features relationships,query
        working-directory: ${{env.working-directory}}

      - name: Build feature (msg)
        run: cargo build --no-default-features --features msg
        working-directory: ${{env.working-directory}}

      - name: Build feature (msg+profiles)
        run: cargo build --no-default-features --features msg,profiles
        working-directory: ${{env.working-directory}}

      - name: Build feature (msg+relationships)
        run: cargo build --no-default-features --features msg,relationships
        working-directory: ${{env.working-directory}}

      - name: Build feature (msg+subspaces)
        run: cargo build --no-default-features --features msg,subspaces
        working-directory: ${{env.working-directory}}

      - name: Build feature (mocks)
        run: cargo build --no-default-features --features mocks
        working-directory: ${{env.working-directory}}
